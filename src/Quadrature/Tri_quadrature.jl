# =============================================
# Triangle integration rule 
# =============================================

const TRIANGLE_QUADRATURE_RULES_BY_DEGREE = Dict{Int, Any}(
    # Degree 1 (1 point)
    1 => ( points = [SVector(1/3, 1/3)], weights = [0.5] ),
    # Degree 2 (3 points)
    2 => ( points = [SVector(1/6, 1/6), SVector(2/3, 1/6), SVector(1/6, 2/3)], weights = 0.5 .* [1/3, 1/3, 1/3] ),
    # Degree 3 (4 points)
    3 => ( points = [SVector(1/3, 1/3), SVector(3/5, 1/5), SVector(1/5, 3/5), SVector(1/5, 1/5)], weights = 0.5 .* [-0.5625, 0.520833333333333, 0.520833333333333, 0.520833333333333] ),
    # Degree 4 (6 points)
    4 => ( points = [SVector(0.1081030182, 0.4459484909), SVector(0.4459484909, 0.1081030182), SVector(0.4459484909, 0.4459484909), SVector(0.8168475729, 0.0915762135), SVector(0.0915762135, 0.8168475729), SVector(0.0915762135, 0.0915762135)], weights = 0.5 .* [0.2233815897, 0.2233815897, 0.2233815897, 0.1099517437, 0.1099517437, 0.1099517437] ),
    # Degree 5 (7 points)
    5 => ( points = [SVector(1/3, 1/3), SVector(0.0597158717, 0.4701420641), SVector(0.4701420641, 0.0597158717), SVector(0.4701420641, 0.4701420641), SVector(0.7974269853, 0.1012865073), SVector(0.1012865073, 0.7974269853), SVector(0.1012865073, 0.1012865073)], weights = 0.5 .* [0.225, 0.1323941528, 0.1323941528, 0.1323941528, 0.1259391805, 0.1259391805, 0.1259391805] ),
    # Degree 6 (12 points)
    6 => (
        points = let a=0.0630890145, b=0.8738219710, c=0.0531450498, d=0.3103524510, e=0.6365024992
                      [SVector(a,a), SVector(a,b), SVector(b,a), SVector(c,d), SVector(c,e), SVector(d,c), SVector(d,e), SVector(e,c), SVector(e,d), SVector(0.2492867452, 0.2492867452), SVector(0.2492867452, 0.5014265096), SVector(0.5014265096, 0.2492867452)]
                  end,
        weights = 0.5 .* [0.0508449064, 0.0508449064, 0.0508449064, 0.0828510756, 0.0828510756, 0.0828510756, 0.0828510756, 0.0828510756, 0.0828510756, 0.1167862757, 0.1167862757, 0.1167862757]
    ),
    # Degree 7 (13 points)
    7 => (
        points = let a=0.0651301029, b=0.8697397942, c=0.0486903154, d=0.3128654960, e=0.6384441886
                      [SVector(1/3,1/3), SVector(a,a), SVector(a,b), SVector(b,a), SVector(c,d), SVector(c,e), SVector(d,c), SVector(d,e), SVector(e,c), SVector(e,d), SVector(0.2603459661, 0.2603459661), SVector(0.2603459661, 0.4793080678), SVector(0.4793080678, 0.2603459661)]
                  end,
        weights = 0.5 .* [0.0533472356, 0.1756152574, 0.1756152574, 0.1756152574, 0.0727579168, 0.0727579168, 0.0727579168, 0.0727579168, 0.0727579168, 0.0727579168, 0.0771137609, 0.0771137609, 0.0771137609]
    ),
    # Degree 8 (16 points)
    8 => ( points = [SVector(0.0911720812, 0.0911720812), SVector(0.0911720812, 0.8176558376), SVector(0.8176558376, 0.0911720812), SVector(0.4454383149, 0.4454383149), SVector(0.4454383149, 0.1091233702), SVector(0.1091233702, 0.4454383149), SVector(0.0633544527, 0.3101588884), SVector(0.0633544527, 0.6264866589), SVector(0.3101588884, 0.0633544527), SVector(0.3101588884, 0.3796822232), SVector(0.6264866589, 0.0633544527), SVector(0.6264866589, 0.3101588884), SVector(1/3, 1/3), SVector(0.2151636775, 0.2151636775), SVector(0.2151636775, 0.5696726451), SVector(0.5696726451, 0.2151636775)], weights = 0.5 .* [0.0549758661, 0.0549758661, 0.0549758661, 0.0505141974, 0.0505141974, 0.0505141974, 0.0406332857, 0.0406332857, 0.0406332857, 0.0406332857, 0.0406332857, 0.0406332857, 0.0814148154, 0.0682894371, 0.0682894371, 0.0682894371] ),
    # Degree 10 (19 points)
    10 =>( points = [SVector(1/3, 1/3), SVector(0.1488423437, 0.1488423437), SVector(0.1488423437, 0.7023153126), SVector(0.7023153126, 0.1488423437), SVector(0.4029525514, 0.4029525514), SVector(0.4029525514, 0.1940948971), SVector(0.1940948971, 0.4029525514), SVector(0.0654530869, 0.0654530869), SVector(0.0654530869, 0.8690938261), SVector(0.8690938261, 0.0654530869), SVector(0.3131554645, 0.6213634351), SVector(0.0654811004, 0.3131554645), SVector(0.0654811004, 0.6213634351), SVector(0.6213634351, 0.0654811004), SVector(0.6213634351, 0.3131554645), SVector(0.3131554645, 0.0654811004), SVector(0.5, 0.0), SVector(0.5, 0.5), SVector(0.0, 0.5)], weights = 0.5 .* [0.1118684787, 0.0504444444, 0.0504444444, 0.0504444444, 0.0645041084, 0.0645041084, 0.0645041084, 0.0264697193, 0.0264697193, 0.0264697193, 0.0298108108, 0.0298108108, 0.0298108108, 0.0298108108, 0.0298108108, 0.0298108108, 0.0, 0.0, 0.0] )
);

function int_rule(element::TriangularElement, degree::Int) 
    if haskey(TRIANGLE_QUADRATURE_RULES_BY_DEGREE, degree)
        rule = TRIANGLE_QUADRATURE_RULES_BY_DEGREE[degree]
        return rule.points, rule.weights
    else
        supported_degrees = sort(collect(keys(TRIANGLE_QUADRATURE_RULES_BY_DEGREE)))
        error("Unsupported integration degree $degree for TriangularElement. Supported degrees are: $supported_degrees")
    end
end